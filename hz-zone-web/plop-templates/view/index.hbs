{{#if template}}
<template>
  <div class="app-container">
    <!-- 查询和其他操作 -->
    <div class="filter-container">
      <el-input v-model="listQuery.name" clearable class="filter-item" style="width: 200px;" placeholder="请输入名称" :maxlength="32" />
      <el-button  class="filter-item" type="primary" icon="el-icon-search" @click="handleFilter">查找</el-button>
      <el-button  class="filter-item" type="primary" icon="el-icon-edit" @click="handleCreate">添加</el-button>
    </div>
    <!-- 查询结果 -->
    <el-table
            v-loading="listLoading"
            element-loading-text="正在查询中。。。"
            :data="list"
            :header-cell-style="{'background-color':'#f5f5f5'}"
            border
            fit
    >
      <el-table-column align="center" label="名称" prop="name" />
      <el-table-column align="center" label="说明" prop="desc" />
      <el-table-column
              align="center"
              label="操作"
              class-name="small-padding fixed-width"
              width="240"
      >
        <template slot-scope="scope">
          <el-button
                  v-permission="['/base/role/update']"
                  type="primary"
                  size="mini"
                  @click="handleUpdate(scope.row)"
          >编辑</el-button>
          <el-button
                  v-permission="['/base/role/delete']"
                  type="danger"
                  size="mini"
                  @click="handleDelete(scope.row)"
          >删除</el-button>
        </template>
      </el-table-column>
    </el-table>

    <pagination v-show="total>0" :total="total" :page.sync="listQuery.page" :limit.sync="listQuery.limit" @pagination="getList" />

    <!-- 添加或修改对话框 -->
    <el-dialog :title="textMap[dialogStatus]" :visible.sync="dialogFormVisible" :close-on-click-modal="false">
      <el-form ref="dataForm" :rules="rules" :model="dataForm" status-icon label-position="left" label-width="100px" style="width: 400px; margin-left:50px;">
        <el-form-item label="名称" prop="name">
          <el-input v-model="dataForm.name" :maxlength="32" />
        </el-form-item>
        <el-form-item label="说明" prop="desc">
          <el-input v-model="dataForm.desc" :maxlength="64" />
        </el-form-item>
      </el-form>
      <div slot="footer" class="dialog-footer">
        <el-button @click="dialogFormVisible = false">取消</el-button>
        <el-button v-if="dialogStatus=='create'" type="primary" @click="createData">确定</el-button>
        <el-button v-else type="primary" @click="updateData">确定</el-button>
      </div>
    </el-dialog>

  </div>
</template>
{{/if}}

{{#if script}}
<script>
import Pagination from '@/components/Pagination'
import { createXXX, deleteXXX, listXXX, updateXXX } from '@/api/module/xxx'
export default {
  name: '{{ properCase name }}',
  components: { Pagination },
  data() {
    return {
      list: null,
      total: 0,
      listLoading: true,
      listQuery: {
        page: 1,
        limit: 10
      },
      dataForm: {},
      dialogFormVisible: false,
      dialogStatus: '',
      textMap: {
        update: '编辑',
        create: '创建'
      },
      rules: {
        name: [
          { required: true, message: '名称不能为空', trigger: 'blur' }
        ]
      }
    }
  },
  created() {
    this.getList()
  },
  methods: {
    getList() {
      this.listLoading = true
      listXXX(this.listQuery).then(res => {
        this.list = res.data.list
        this.total = res.data.total
        this.listLoading = false
      }).catch(() => {
        this.list = []
        this.total = 0
        this.listLoading = false
      })
    },
    handleFilter() {
      this.listQuery.page = 1
      this.getList()
    },
    resetForm() {
      this.dataForm = {}
    },
    handleCreate() {
      this.resetForm()
      this.dialogStatus = 'create'
      this.dialogFormVisible = true
      this.$nextTick(() => {
        this.$refs['dataForm'].clearValidate()
      })
    },
    createData() {
      this.$refs['dataForm'].validate(valid => {
        if (valid) {
          this.loading = this.$loading({ lock: true, text:'正在加载...请勿进行其它操作', spinner: 'el-icon-loading' })
          createXXX(this.dataForm).then(() => {
            this.getList()
            this.dialogFormVisible = false
            this.$message.success('添加成功')
          }).finally(() => {
            this.loading.close()
          })
        }
      })
    },
    handleUpdate(row) {
      this.dataForm = Object.assign({}, row)
      this.dialogStatus = 'update'
      this.dialogFormVisible = true
      this.$nextTick(() => {
        this.$refs['dataForm'].clearValidate()
      })
    },
    updateData() {
      this.$refs['dataForm'].validate(valid => {
        if (valid) {
          this.loading = this.$loading({ lock: true, text:'正在加载...请勿进行其它操作', spinner: 'el-icon-loading' })
          updateXXX(this.dataForm).then(() => {
            this.dialogFormVisible = false
            this.$message.success('更新成功')
            for (const v of this.list) {
              if (v.id === this.dataForm.id) {
                const index = this.list.indexOf(v)
                this.list.splice(index, 1, this.dataForm)
                break
              }
            }
          }).finally(() => {
            this.loading.close()
          })
        }
      })
    },
    handleDelete(row) {
      this.$confirm('确定删除吗?', '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }).then(() => {
        deleteXXX(row).then(() => {
          this.$message.success('删除成功')
          const index = this.list.indexOf(row)
          this.list.splice(index, 1)
        })
      })
    }
  }
}
</script>
{{/if}}

{{#if style}}
<style lang="scss" scoped>
  .filter-container > button{
    margin-left: 10px;
  }
</style>
{{/if}}
